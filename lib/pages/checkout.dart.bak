// ignore_for_file: deprecated_member_use

import 'dart:convert';

import 'package:apploook/l10n/app_localizations.dart';
import 'package:apploook/pages/cart.dart';
import 'package:apploook/models/view/map_screen.dart';
import 'package:apploook/providers/notification_provider.dart';
import 'package:apploook/widget/branch_locations.dart';
import 'package:apploook/services/map_services/open_street_map.dart';
import 'package:apploook/services/api_service.dart';
import 'package:apploook/services/order_mode_service.dart';
import 'package:apploook/services/payme_service.dart';
import 'package:apploook/services/payme_transaction_service.dart';
import 'package:apploook/config/branch_config.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:provider/provider.dart';
import 'package:apploook/cart_provider.dart';
import 'package:flutter/services.dart';
import 'package:firebase_remote_config/firebase_remote_config.dart';

import '../widget/branch_data.dart';

class Checkout extends StatefulWidget {
  Checkout({
    Key? key,
  }) : super(key: key);

  @override
  State<Checkout> createState() => _CheckoutState();
}

class _CheckoutState extends State<Checkout> {
  // Order mode service to check current mode
  final OrderModeService _orderModeService = OrderModeService();
  int _selectedIndex = 0;
  late double orderPrice = 0;
  double deliveryFee = 0;
  String firstName = '';
  String phoneNumber = '';
  String clientComment = '';
  String clientCommentPhone = '';
  String commented = '';
  String orderType = '';
  String carDetails = '';
  String carDetailsExtraInfo = '';
  String? paymeOrderId; // To store the Payme order ID
  bool _isProcessing = false;
  double total = 0.0;

  // Distance calculation variables
  bool _isCalculatingDistance = false;
  Map<String, dynamic>? _nearestBranch;
  String _distanceMessage = '';

  late FirebaseRemoteConfig remoteConfig;
  bool _isRemoteConfigInitialized = false;

  final FocusNode _carDetailsFocusNode = FocusNode();

  @override
  void initState() {
    super.initState();
    _initializeRemoteConfig();
    _loadPhoneNumber();
    _loadCustomerName();
    _initializeOrderMode();
    // Check for pending Payme transactions
    PaymeTransactionService.checkPendingOrders(context);
    // We'll calculate distance after address selection, not on page load
  }

  // Handle Payme payment for delivery orders
  Future<void> _handlePaymePayment({
    required String name,
    required String phone,
    required String? address,
    required String comment,
    required double total,
    required double latitude,
    required double longitude,
    required CartProvider cartProvider,
    required double deliveryFee,
    required String? branchName,
  }) async {
    try {
      setState(() {
        _isProcessing = true;
      });

      // Get API service with client credentials
      final remoteConfig = FirebaseRemoteConfig.instance;
      final clientId = remoteConfig.getString('api_client_id');
      final clientSecret = remoteConfig.getString('api_client_secret');
      
      // Make sure branch name is not null
      if (branchName == null) {
        throw Exception('Branch name is required for Payme payment');
      }
      
      // Get merchant ID from selected branch config
      final branchConfig = await BranchConfigs.getConfig(branchName);
      final merchantId = branchConfig.merchantId;
      
      if (merchantId.isEmpty) {
        throw Exception('Payme merchant ID not configured for this branch');
      }
      
      // Generate a unique order ID for Payme
      final paymeOrderId = PaymeService.generateOrderId();
      
      // Format cart items for the API
      List<Map<String, dynamic>> formattedItems = cartProvider.cartItems.map((item) {
        return {
          "id": item.product.uuid,
          "name": item.product.name,
          "price": item.product.price,
          "quantity": item.quantity,
          "totalPrice": item.product.price * item.quantity,
        };
      }).toList();
      
      // Save the order details for later processing
      await PaymeTransactionService.savePendingOrder(
        orderId: paymeOrderId,
        name: name,
        phone: phone,
        address: address,
        comment: comment,
        total: total,
        latitude: latitude,
        longitude: longitude,
        deliveryFee: deliveryFee,
        items: formattedItems,
        clientId: clientId,
        clientSecret: clientSecret,
      );
      
      // Launch Payme checkout
      final launched = await PaymeService.launchPaymeCheckout(
        context, 
        merchantId, 
        paymeOrderId, 
        total
      );
      
      if (!launched) {
        throw Exception('Could not launch Payme checkout');
      }
      
      // Navigate to home page after launching Payme
      Navigator.pushNamedAndRemoveUntil(
        context, 
        '/homeNew', 
        (route) => false,
      );
      
    } catch (e) {
      print('Error handling Payme payment: $e');
      // Show error message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Payment error: $e'))
      );
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }
  
  // Handle Payme payment for carhop orders
  Future<void> _handlePaymeCarhopPayment({
    required String name,
    required String phone,
    required String? branchName,
    required String comment,
    required String carDetails,
    required double total,
    required double latitude,
    required double longitude,
    required CartProvider cartProvider,
    required String orderType,
  }) async {
    try {
      setState(() {
        _isProcessing = true;
      });
      
      // Make sure branch name is not null
      if (branchName == null) {
        throw Exception('Branch name is required for Payme payment');
      }
      
      // Get branch config for the selected branch
      final branchConfig = await BranchConfigs.getConfig(branchName);
      // Note: BranchConfigs.getConfig always returns a non-null value
      
      // Get merchant ID from branch config
      final merchantId = branchConfig.merchantId;
      
      if (merchantId.isEmpty) {
        throw Exception('Payme merchant ID not configured for this branch');
      }
      
      // Generate a unique order ID for Payme
      final paymeOrderId = PaymeService.generateOrderId();
      
      // Format order items for Sieves API
      final formattedOrderItems = cartProvider.cartItems.map((item) => {
        "actual_price": item.product.price,
        "product_id": item.product.id.toString(),
        "quantity": item.quantity,
        "note": null,
        "inventoryPriceList": [] // Required by the API
      }).toList();
      
      // Create the full request payload
      final Map<String, dynamic> requestBody = {
        "customer_quantity": 1,
        "customer_id": null,
        "is_fast": 0,
        "queue_type": "sync",
        "start_time": "now",
        "isSynchronous": "sync",
        "delivery_employee_id": null,
        "employee_id": branchConfig.employeeId,
        "branch_id": branchConfig.branchId,
        "order_type_id": 8, // for carhop orders
        "orderItems": formattedOrderItems,
        "transactions": [
          {
            "account_id": 1,
            "amount": total,
            "payment_type_id": 3, // 3 for Payme
            "type": "deposit"
          }
        ],
        "value": total,
        "note": "$comment\nCar Details: $carDetails",
        "day_session_id": null,
        "pager_number": phone,
        "pos_id": null,
        "pos_session_id": null,
        "delivery_amount": null
      };
      
      // Save the carhop order details for later processing using PaymeTransactionService
      await PaymeTransactionService.savePendingCarhopOrder({
        'order_id': paymeOrderId,
        'request_body': requestBody,
        'branch_config': {
          'sieves_api_code': branchConfig.sievesApiCode,
          'sieves_api_token': branchConfig.sievesApiToken,
        },
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      });
      
      // Launch Payme checkout
      final launched = await PaymeService.launchPaymeCheckout(
        context, 
        merchantId, 
        paymeOrderId, 
        total
      );
      
      if (!launched) {
        throw Exception('Could not launch Payme checkout');
      }
      
      // Navigate to home page after launching Payme
      Navigator.pushNamedAndRemoveUntil(
        context, 
        '/homeNew', 
        (route) => false,
      );
      
    } catch (e) {
      print('Error handling Payme carhop payment: $e');
      // Show error message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Payment error: $e'))
      );
    } finally {
      setState(() {
        _isProcessing = false;
      });
    }
  }

  // Check if there's a pending Payme payment (keeping for reference)
  Future<void> _checkPendingPaymePayment() async {
    final pendingPayment = await PaymeService.getPendingPayment();

    if (pendingPayment != null) {
      // If the payment was initiated more than 30 minutes ago, clear it
      final timestamp = pendingPayment['timestamp'] as int;
      final now = DateTime.now().millisecondsSinceEpoch;

      if (now - timestamp > 30 * 60 * 1000) {
        // 30 minutes in milliseconds
        await PaymeService.clearPendingPayment();
        return;
      }

      // Show a dialog to check payment status
      // ignore: use_build_context_synchronously
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          title: const Text('Payme Payment'),
          content: const Text(
              'You have a pending Payme payment. Did you complete the payment?'),
          actions: [
            TextButton(
              onPressed: () async {
                await PaymeService.clearPendingPayment();
                Navigator.pop(context);
              },
              child: const Text('No, Cancel Payment'),
            ),
            TextButton(
              onPressed: () async {
                Navigator.pop(context);
                // Show loading dialog
                showDialog(
                  context: context,
                  barrierDismissible: false,
                  builder: (context) => const AlertDialog(
                    content: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        CircularProgressIndicator(),
                        SizedBox(height: 16),
                        Text('Processing payment...'),
                      ],
                    ),
                  ),
                );

                // Simulate payment verification
                // In a real implementation, you would verify with Payme's server
                await Future.delayed(const Duration(seconds: 2));
                await PaymeService.clearPendingPayment();

                // Close loading dialog
                Navigator.pop(context);

                // Show success message
                // ignore: use_build_context_synchronously
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: Text(AppLocalizations.of(context).orderSuccess),
                    content:
                        Text(AppLocalizations.of(context).orderSuccessSubTitle),
                    actions: [
                      TextButton(
                        onPressed: () {
                          Navigator.pop(context);
                          Navigator.pushNamed(context, '/homeNew');
                        },
                        style: TextButton.styleFrom(
                          backgroundColor: Colors.green,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(25),
                          ),
                        ),
                        child: const Text(
                          'OK',
                          style: TextStyle(color: Colors.white),
                        ),
                      ),
                    ],
                  ),
                );
              },
              child: const Text('Yes, Payment Complete'),
            ),
          ],
        ),
      );
    }
  }

  // Initialize order mode and set initial tab selection accordingly
  Future<void> _initializeOrderMode() async {
    await _orderModeService.initialize();
    setState(() {
      // If in carhop mode, select the carhop tab (index 2) by default
      if (_orderModeService.currentMode == OrderMode.carhop) {
        _selectedIndex = 2;
      } else {
        // Otherwise default to delivery tab (index 0)
        _selectedIndex = 0;
      }
    });
  }

  // Function to calculate distance to the nearest branch
  Future<void> _calculateDistanceToNearestBranch() async {
    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    final clientLat = cartProvider.showLat();
    final clientLng = cartProvider.showLong();

    // Only calculate if we have valid coordinates
    if (clientLat != 0.0 && clientLng != 0.0) {
      setState(() {
        _isCalculatingDistance = true;
        _distanceMessage = 'Calculating distance...';
      });

      try {
        final nearestBranch = await findNearestBranch(clientLat, clientLng);

        setState(() {
          _nearestBranch = nearestBranch;
          if (nearestBranch != null) {
            _distanceMessage =
                'Distance to nearest branch: ${nearestBranch['distance'].toStringAsFixed(2)} km';
            // Update delivery fee if available
            if (nearestBranch['deliveryFee'] != null) {
              deliveryFee =
                  double.tryParse(nearestBranch['deliveryFee'].toString()) ?? 0;
            } else {
              deliveryFee = 0;
            }
          } else {
            _distanceMessage = 'Could not calculate distance to nearest branch';
            deliveryFee = 0;
          }
          _isCalculatingDistance = false;
        });
      } catch (e) {
        setState(() {
          _distanceMessage = 'Error calculating distance: $e';
          _isCalculatingDistance = false;
        });
      }
    } else {
      setState(() {
        _distanceMessage = 'Location coordinates not available';
      });
    }
  }

  @override
  void dispose() {
    _carDetailsFocusNode.dispose();
    super.dispose();
  }

  Future<void> _initializeRemoteConfig() async {
    try {
      remoteConfig = FirebaseRemoteConfig.instance;
      await remoteConfig.setConfigSettings(RemoteConfigSettings(
        fetchTimeout: const Duration(minutes: 1),
        minimumFetchInterval: const Duration(hours: 1),
      ));

      // Set default value as a string
      // await remoteConfig.setDefaults({'chat_id': '-1002074915184'}); Loook Test Bot

      bool updated = await remoteConfig.fetchAndActivate();
      _isRemoteConfigInitialized = true;

      print('Remote config updated: $updated');
      String currentChatId = remoteConfig.getString('chat_id');
      print('Current chat_id from Remote Config: $currentChatId');
    } catch (e) {
      print('Error initializing remote config: $e');
      _isRemoteConfigInitialized = false;
    }
  }

  Future<void> _loadPhoneNumber() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      phoneNumber = prefs.getString('phoneNumber') ?? 'No number';
    });
  }

  // Total price calculation is handled in the build method

  Future<void> _loadCustomerName() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      firstName = prefs.getString('firstName') ?? 'Anonymous';
    });
  }

  void _updateCommented() {
    setState(() {
      commented = (clientComment.isNotEmpty ? clientComment + ', ' : '') +
          (clientCommentPhone.isNotEmpty
              ? 'Additional Number: ' + clientCommentPhone
              : '');
    });
  }

  void _updateCarDetails() {
    setState(() {
      carDetails = (carDetails.isNotEmpty ? carDetails + ', ' : '') +
          (carDetailsExtraInfo.isNotEmpty
              ? 'Extra Info: ' + carDetailsExtraInfo
              : '');
    });
    // print('Car Details: $carDetails');
  }

  String? selectedAddress;
  String? selectedBranch;
  String? selectedOption;
  String? selectedCity;

  List<String> branches = [
    'Loook Yunusobod',
    'Loook Beruniy',
    'Loook Chilanzar',
    'Loook Maksim Gorkiy',
    'Loook Boulevard',
    'Test'
  ];
  List<String> city = [
    'Tashkent',
  ];

  // Payment validation is handled directly in the form validation

  @override
  Widget build(BuildContext context) {
    var cartProvider = Provider.of<CartProvider>(context);

    orderPrice = cartProvider.getTotalPrice();

    List<String> orderItems = cartProvider.cartItems.map((item) {
      var itemTotal = item.quantity * item.product.price;
      total += itemTotal;

      return '${item.product.name}\n ${item.quantity} x ${NumberFormat('#,##0').format(item.product.price)} = ${NumberFormat('#,##0').format(item.quantity * item.product.price)} сум\n';
    }).toList();

    if (_selectedIndex == 0) {
      orderType = 'Delivery';
    } else if (_selectedIndex == 1) {
      orderType = 'Self-Pickup';
    } else {
      orderType = 'Carhop';
    }

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: appBar(),
      body: SingleChildScrollView(
        child: Column(
          children: [
            const SizedBox(height: 20.0),
            Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                SizedBox(
                  width: 15.0,
                ),
                Text(
                  AppLocalizations.of(context).chooseOrderType,
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                ),
                SizedBox(
                  width: 170,
                ),
                // SvgPicture.asset('images/error_outline.svg'),
              ],
            ),
            const SizedBox(height: 20.0),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                // Delivery button - disabled in carhop mode
                _orderModeService.currentMode == OrderMode.carhop
                    ? ElevatedButton(
                        onPressed: null, // Disabled in carhop mode
                        style: ButtonStyle(
                          backgroundColor: MaterialStateProperty.all(
                            const Color(
                                0xffE0E0E0), // Gray color for disabled state
                          ),
                          shape: WidgetStateProperty.all(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                        child: Text(
                          AppLocalizations.of(context).delivery,
                          style: const TextStyle(
                              color: Color(0xFF9E9E9E),
                              fontWeight: FontWeight.w500),
                        ),
                      )
                    : ElevatedButton(
                        onPressed: () => setState(() => _selectedIndex = 0),
                        style: ButtonStyle(
                          backgroundColor: MaterialStateProperty.all(
                            _selectedIndex == 0
                                ? const Color(0xffFEC700)
                                : const Color(0xffF1F2F7),
                          ),
                          shape: WidgetStateProperty.all(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                        child: Text(
                          AppLocalizations.of(context).delivery,
                          style: const TextStyle(
                              color: Colors.black, fontWeight: FontWeight.w500),
                        ),
                      ),

                // Self-pickup button - disabled in carhop mode
                _orderModeService.currentMode == OrderMode.carhop
                    ? ElevatedButton(
                        onPressed: null, // Disabled in carhop mode
                        style: ButtonStyle(
                          backgroundColor: MaterialStateProperty.all(
                            const Color(
                                0xffE0E0E0), // Gray color for disabled state
                          ),
                          shape: WidgetStateProperty.all(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                        child: Text(
                          AppLocalizations.of(context).selfPickup,
                          style: const TextStyle(
                              color: Color(0xFF9E9E9E),
                              fontWeight: FontWeight.w500),
                        ),
                      )
                    : ElevatedButton(
                        onPressed: () => setState(() => _selectedIndex = 1),
                        style: ButtonStyle(
                          backgroundColor: MaterialStateProperty.all(
                            _selectedIndex == 1
                                ? const Color(0xffFEC700)
                                : const Color(0xffF1F2F7),
                          ),
                          shape: WidgetStateProperty.all(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                        child: Text(
                          AppLocalizations.of(context).selfPickup,
                          style: const TextStyle(
                              color: Colors.black, fontWeight: FontWeight.w500),
                        ),
                      ),

                // Carhop button - disabled in delivery/takeaway mode
                _orderModeService.currentMode == OrderMode.carhop
                    ? ElevatedButton(
                        onPressed: () => setState(() => _selectedIndex = 2),
                        style: ButtonStyle(
                          backgroundColor: WidgetStateProperty.all(
                            _selectedIndex == 2
                                ? const Color(0xffFEC700)
                                : const Color(0xffF1F2F7),
                          ),
                          shape: WidgetStateProperty.all(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                        child: const Text(
                          'Carhop',
                          style: TextStyle(
                              color: Colors.black, fontWeight: FontWeight.w500),
                        ),
                      )
                    : ElevatedButton(
                        onPressed: null, // Disabled button
                        style: ButtonStyle(
                          backgroundColor: WidgetStateProperty.all(
                            const Color(
                                0xffE0E0E0), // Gray color for disabled state
                          ),
                          shape: WidgetStateProperty.all(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10),
                            ),
                          ),
                        ),
                        child: const Text(
                          'Carhop',
                          style: TextStyle(
                              color: Color(0xFF9E9E9E),
                              fontWeight: FontWeight.w500),
                        ),
                      ),
              ],
            ),
            const SizedBox(
              height: 20.0,
            ),
            Column(
              children: [
                Padding(
                  padding: const EdgeInsets.only(bottom: 10),
                  child: Column(
                    children: [
                      const SizedBox(height: 20),
                      Text(
                        _selectedIndex == 0
                            ? AppLocalizations.of(context).yourDeliveryLocation
                            : _selectedIndex == 1
                                ? AppLocalizations.of(context).selfPickupTitle
                                : AppLocalizations.of(context).carhopService,
                        style: const TextStyle(
                            fontSize: 20, fontWeight: FontWeight.bold),
                      ),
                    ],
                  ),
                ),
                IndexedStack(
                  index: _selectedIndex,
                  children: [
                    // DELIVERY
                    GestureDetector(
                      onTap: () async {
                        final result = await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const MapScreen(),
                          ),
                        );
                        if (result != null) {
                          setState(() {
                            selectedAddress = result;
                          });

                          // Calculate distance after address selection
                          _calculateDistanceToNearestBranch();
                        }
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 15.0),
                        child: Container(
                          height: 140,
                          width: MediaQuery.of(context).size.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(15),
                            color: const Color(0xFFF1F2F7),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.grey.withOpacity(0.5),
                                spreadRadius: 1,
                                blurRadius: 10,
                                offset: const Offset(0, 5),
                              ),
                            ],
                          ),
                          child: SingleChildScrollView(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Padding(
                                  padding: const EdgeInsets.all(15.0),
                                  child: Row(
                                    mainAxisAlignment:
                                        MainAxisAlignment.spaceBetween,
                                    children: [
                                      Text(
                                        AppLocalizations.of(context)
                                            .yourDeliveryLocation,
                                        style: const TextStyle(
                                          fontWeight: FontWeight.w500,
                                          fontSize: 20,
                                        ),
                                      ),
                                      SvgPicture.asset(
                                          'images/close_black.svg'),
                                    ],
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(
                                      left: 15.0,
                                      right: 15.0,
                                      bottom: 15.0,
                                      top: 10),
                                  child: Text(
                                    selectedAddress ??
                                        AppLocalizations.of(context)
                                            .chooseYourLocation,
                                    style: const TextStyle(
                                        fontSize: 16,
                                        fontWeight: FontWeight.w500),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ),

                    // SELF-PICKUP
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 15.0),
                      child: Container(
                        height: 140,
                        width: 390,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(15),
                          color: const Color(0xFFF1F2F7),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.5),
                              spreadRadius: 1,
                              blurRadius: 10,
                              offset: const Offset(0, 5),
                            ),
                          ],
                        ),
                        child: Padding(
                          padding: const EdgeInsets.all(15.0),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                AppLocalizations.of(context).chooseBranchToPick,
                                style: const TextStyle(
                                    fontWeight: FontWeight.w500, fontSize: 20),
                              ),
                              const SizedBox(height: 10),
                              DropdownButton<String>(
                                value: selectedBranch,
                                hint: Text(
                                  AppLocalizations.of(context).selectBranch,
                                ),
                                dropdownColor: const Color(0xFFF1F2F7),
                                isExpanded: true,
                                items: branches.map((String branch) {
                                  return DropdownMenuItem<String>(
                                    value: branch,
                                    child: Text(branch),
                                  );
                                }).toList(),
                                onChanged: (String? newValue) {
                                  setState(() {
                                    selectedBranch = newValue;
                                  });
                                },
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),

                    // CARHOP
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 15.0),
                      child: SizedBox(
                        height: _selectedIndex == 2 ? 480 : 140,
                        width: 390,
                        child: Column(
                          children: [
                            Container(
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(15),
                                color: const Color(0xFFF1F2F7),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.grey.withOpacity(0.5),
                                    spreadRadius: 1,
                                    blurRadius: 10,
                                    offset: const Offset(0, 5),
                                  ),
                                ],
                              ),
                              child: Padding(
                                padding: const EdgeInsets.all(15.0),
                                child: Column(
                                  children: [
                                    Row(
                                      children: [
                                        Expanded(
                                          child: DropdownButton<String>(
                                            value: selectedCity,
                                            hint: Text(
                                                AppLocalizations.of(context)
                                                    .selectRegion),
                                            isExpanded: true,
                                            dropdownColor:
                                                const Color(0xFFF1F2F7),
                                            items: city.map((String city) {
                                              return DropdownMenuItem<String>(
                                                value: city,
                                                child: Text(
                                                  city,
                                                  style: const TextStyle(
                                                      fontWeight:
                                                          FontWeight.w600,
                                                      fontSize: 14),
                                                ),
                                              );
                                            }).toList(),
                                            onChanged: (String? newValue) {
                                              setState(() {
                                                selectedCity = newValue;
                                              });
                                            },
                                          ),
                                        ),
                                        if (selectedCity != null)
                                          IconButton(
                                            icon: const Icon(Icons.clear,
                                                color: Colors.grey),
                                            onPressed: () {
                                              setState(() {
                                                selectedCity = null;
                                              });
                                            },
                                          ),
                                      ],
                                    ),
                                    const SizedBox(height: 10),
                                    Row(
                                      children: [
                                        Expanded(
                                          child: DropdownButton<String>(
                                            value: selectedBranch,
                                            hint: Text(
                                                AppLocalizations.of(context)
                                                    .selectBranch),
                                            isExpanded: true,
                                            dropdownColor:
                                                const Color(0xFFF1F2F7),
                                            items:
                                                branches.map((String branch) {
                                              return DropdownMenuItem<String>(
                                                value: branch,
                                                child: Text(
                                                  branch,
                                                  style: const TextStyle(
                                                      fontWeight:
                                                          FontWeight.w600,
                                                      fontSize: 14),
                                                ),
                                              );
                                            }).toList(),
                                            onChanged: (String? newValue) {
                                              setState(() {
                                                selectedBranch = newValue;
                                              });
                                            },
                                          ),
                                        ),
                                        if (selectedBranch != null)
                                          IconButton(
                                            icon: const Icon(Icons.clear,
                                                color: Colors.grey),
                                            onPressed: () {
                                              setState(() {
                                                selectedBranch = null;
                                              });
                                            },
                                          ),
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            const SizedBox(
                              height: 22.0,
                            ),
                            Align(
                              alignment: AlignmentDirectional.centerStart,
                              child: Text(
                                AppLocalizations.of(context)
                                    .carhopServiceBranchInfo,
                                style: const TextStyle(
                                    fontWeight: FontWeight.w600, fontSize: 14),
                              ),
                            ),
                            const SizedBox(
                              height: 15.0,
                            ),
                            Container(
                              height: 158,
                              width: 390,
                              decoration: BoxDecoration(
                                color: const Color(0xFFF1F2F7),
                                borderRadius: BorderRadius.circular(15),
                                border: Border.all(color: Colors.red),
                              ),
                              child: Padding(
                                padding: const EdgeInsets.only(
                                    top: 20.0, right: 15.0),
                                child: Row(
                                  children: [
                                    Expanded(
                                      flex: 1,
                                      child: Container(
                                        color: Colors.transparent,
                                        child: Align(
                                          alignment: Alignment.topRight,
                                          child: SvgPicture.asset(
                                              'images/carhopMetka.svg'),
                                        ),
                                      ),
                                    ),
                                    const SizedBox(
                                      width: 10.0,
                                    ),
                                    Expanded(
                                      flex: 6,
                                      child: Container(
                                        color: Colors.transparent,
                                        child: Align(
                                          alignment: Alignment.topLeft,
                                          child: Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              Text(
                                                selectedBranch != null
                                                    ? "$selectedBranch - LOOOK"
                                                    : AppLocalizations.of(
                                                            context)
                                                        .selectBranch,
                                                style: const TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: Color(0xFFff0000),
                                                ),
                                              ),
                                              if (selectedBranch != null) ...[
                                                const SizedBox(height: 5.0),
                                                Text(
                                                  BranchData.getBranchAddress(
                                                      selectedBranch),
                                                  style: const TextStyle(
                                                    fontSize: 12,
                                                    fontWeight: FontWeight.w500,
                                                    color: Color(0xff5B5B5B),
                                                  ),
                                                ),
                                              ],
                                              const SizedBox(
                                                height: 15.0,
                                              ),
                                              Text(
                                                '${AppLocalizations.of(context).openingHours} 9:00-00:00',
                                                style: const TextStyle(
                                                  fontWeight: FontWeight.w600,
                                                  fontSize: 12.0,
                                                ),
                                              ),
                                              const SizedBox(
                                                height: 15.0,
                                              ),
                                              Row(
                                                children: [
                                                  SvgPicture.asset(
                                                      'images/mapPointer.svg'),
                                                  const SizedBox(
                                                    width: 15.0,
                                                  ),
                                                  GestureDetector(
                                                    onTap: () {
                                                      BranchLocations.openMap(
                                                          selectedBranch);
                                                    },
                                                    child: Text(
                                                      AppLocalizations.of(
                                                              context)
                                                          .viewInMap,
                                                      style: const TextStyle(
                                                        color:
                                                            Color(0xFF1C90E1),
                                                        fontSize: 12,
                                                        fontWeight:
                                                            FontWeight.w600,
                                                        decoration:
                                                            TextDecoration
                                                                .underline,
                                                      ),
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            const SizedBox(
                              height: 15.0,
                            ),
                            Align(
                              alignment: AlignmentDirectional.centerStart,
                              child: Column(
                                children: [
                                  Text(
                                    AppLocalizations.of(context).carDetails,
                                    style: const TextStyle(
                                        fontWeight: FontWeight.w600,
                                        fontSize: 14),
                                  ),
                                ],
                              ),
                            ),
                            const SizedBox(
                              height: 5,
                            ),
                            Text(
                              AppLocalizations.of(context).carDetailsHint,
                              style: const TextStyle(
                                  fontSize: 12, color: Color(0xFFB0B0B0)),
                            ),
                            const SizedBox(
                              height: 15.0,
                            ),
                            Container(
                              width: 390,
                              height: 48,
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(10),
                                border: Border.all(color: Colors.black26),
                              ),
                              child: GestureDetector(
                                onTap: () {
                                  FocusScope.of(context)
                                      .requestFocus(_carDetailsFocusNode);
                                },
                                child: Padding(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 10),
                                  child: TextField(
                                    focusNode: _carDetailsFocusNode,
                                    autocorrect: false,
                                    decoration: InputDecoration(
                                      hintText: AppLocalizations.of(context)
                                          .carDetailsInputHint,
                                      hintStyle: const TextStyle(fontSize: 12),
                                      border: InputBorder.none,
                                      contentPadding:
                                          const EdgeInsets.only(left: 15.0),
                                    ),
                                    onChanged: (value) {
                                      setState(() {
                                        carDetails = value;
                                        _updateCarDetails();
                                      });
                                    },
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
            const SizedBox(
              height: 40.0,
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 15.0),
              child: Container(
                width: MediaQuery.of(context).size.width,
                height: 220,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(15.0),
                  color: Colors.white,
                  boxShadow: const [
                    BoxShadow(
                      color: Color(0xFFD9D9D9), // Shadow color
                      offset: Offset(0, 7), // Offset in x and y direction
                      blurRadius: 10.0, // Spread radius
                      spreadRadius: 2.0, // Blur radius
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    Padding(
                      padding: const EdgeInsets.all(15.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            '${AppLocalizations.of(context).orderPrice} :',
                            style: const TextStyle(fontSize: 16),
                          ),
                          Text(
                              '${NumberFormat('#,##0').format(orderPrice)} UZS'),
                        ],
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(15.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            '${AppLocalizations.of(context).deliveryPrice} :',
                            style: const TextStyle(fontSize: 16),
                          ),
                          _selectedIndex == 0 && _isCalculatingDistance
                              ? SizedBox(
                                  width: 20,
                                  height: 20,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2,
                                    valueColor: AlwaysStoppedAnimation<Color>(
                                        Colors.amber),
                                  ),
                                )
                              : Text(
                                  _selectedIndex == 0 &&
                                          _nearestBranch != null &&
                                          _nearestBranch!['deliveryFee'] != null
                                      ? '${_nearestBranch!['deliveryFee'].toString()} UZS'
                                      : AppLocalizations.of(context).unknown,
                                ),
                        ],
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(15.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            'Bag price :',
                            style: const TextStyle(fontSize: 16),
                          ),
                          Text('2000 UZS'),
                        ],
                      ),
                    ),
                    const SizedBox(
                      height: 10.0,
                    ),
                    Padding(
                      padding: const EdgeInsets.all(15.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            '${AppLocalizations.of(context).totalPrice} :',
                            style: const TextStyle(fontSize: 16),
                          ),
                          Text(
                              '${NumberFormat('#,##0').format(orderPrice + 2000)} UZS'),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(
              height: 40,
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20.0),
              child: DropdownButtonFormField<String>(
                decoration: InputDecoration(
                  labelText: AppLocalizations.of(context).paymentMethod,
                  labelStyle: const TextStyle(color: Colors.black),
                ),
                dropdownColor: const Color(0xFFF1F2F7),
                value: selectedOption,
                isExpanded: true,
                items: [
                  DropdownMenuItem<String>(
                    value: 'Cash',
                    child: Row(
                      children: [
                        const Icon(Icons.money, color: Colors.green),
                        const SizedBox(width: 10),
                        Text(AppLocalizations.of(context).cash),
                      ],
                    ),
                  ),
                  DropdownMenuItem<String>(
                    value: 'Card',
                    child: Row(
                      children: [
                        const Icon(Icons.credit_card, color: Colors.blue),
                        const SizedBox(width: 10),
                        Text(AppLocalizations.of(context).card),
                      ],
                    ),
                  ),
                  DropdownMenuItem<String>(
                    value: 'Payme',
                    child: Row(
                      children: [
                        const Icon(Icons.payment, color: Colors.purple),
                        const SizedBox(width: 10),
                        const Text('Payme'),
                      ],
                    ),
                  ),
                ],
                onChanged: (value) {
                  setState(() {
                    selectedOption = value;
                  });
                },
              ),
            ),
            const SizedBox(
              height: 40,
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 15.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    AppLocalizations.of(context).additionalNumber,
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(
                    height: 15.0,
                  ),
                  Container(
                    height: 48,
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.black26),
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Row(
                      children: [
                        // Country code section
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12),
                          decoration: BoxDecoration(
                            border: Border(
                              right: BorderSide(
                                color: Colors.black26,
                                width: 1.0,
                              ),
                            ),
                          ),
                          child: const Text(
                            '+998',
                            style: TextStyle(
                              fontSize: 16.0,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                        // Phone number input
                        Expanded(
                          child: TextField(
                            decoration: InputDecoration(
                              hintText:
                                  AppLocalizations.of(context).numberHintText,
                              border: InputBorder.none,
                              contentPadding: const EdgeInsets.symmetric(
                                horizontal: 12,
                                vertical: 8,
                              ),
                              isDense: true,
                            ),
                            style: const TextStyle(
                              fontSize: 16.0,
                              fontWeight: FontWeight.w400,
                            ),
                            keyboardType: TextInputType.phone,
                            textInputAction: TextInputAction.next,
                            inputFormatters: [
                              FilteringTextInputFormatter.digitsOnly,
                              LengthLimitingTextInputFormatter(9),
                            ],
                            onChanged: (value) {
                              setState(() {
                                clientCommentPhone = value;
                                _updateCommented();
                              });
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 40.0),
                  Text(
                    AppLocalizations.of(context).comments,
                    style: const TextStyle(
                      fontSize: 16,
                      color: Colors.black,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(
                    height: 15.0,
                  ),
                  Container(
                    height: 100,
                    width: MediaQuery.of(context).size.width - 32,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      border: Border.all(color: Colors.black26),
                    ),
                    child: Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 10),
                      child: TextField(
                        decoration: const InputDecoration(
                          border: InputBorder.none,
                        ),
                        onChanged: (value) {
                          clientComment = value;
                          _updateCommented();
                        },
                      ),
                    ),
                  )
                ],
              ),
            ),
            const SizedBox(
              height: 50.0,
            ),
            ElevatedButton(
              onPressed: (_selectedIndex == 0
                      ? selectedAddress != null &&
                          selectedOption != null &&
                          !_isProcessing
                      : _selectedIndex == 1
                          ? selectedBranch != null &&
                              selectedOption != null &&
                              !_isProcessing
                          : selectedCity !=
                                  null && // Add check for selectedCity
                              selectedBranch != null &&
                              selectedOption != null &&
                              carDetails != null &&
                              carDetails!.trim().isNotEmpty &&
                              !_isProcessing)
                  ? () async {
                      setState(() {
                        _isProcessing = true; // Start processing
                      });

                      // Check if payment type is Payme
                      if (selectedOption == 'Payme') {
                        try {
                          // Handle Payme payment based on order type
                          if (_selectedIndex == 0) {
                            // For delivery orders, use the nearest branch
                            if (_nearestBranch == null) {
                              throw Exception('Unable to determine nearest branch for delivery. Please try again.');
                            }
                            
                            // Get branch name from nearest branch calculation
                            final nearestBranchName = _nearestBranch!['name'] as String;
                            
                            // Delivery order with Payme payment
                            await _handlePaymePayment(
                              name: firstName,
                              phone: phoneNumber,
                              address: selectedAddress,
                              comment: commented,
                              total: orderPrice,
                              latitude: cartProvider.showLat(),
                              longitude: cartProvider.showLong(),
                              cartProvider: cartProvider,
                              deliveryFee: deliveryFee,
                              branchName: nearestBranchName,
                            );
                          } else if (_selectedIndex == 2) {
                            // For carhop orders, branch must be selected by user
                            if (selectedBranch == null) {
                              throw Exception('Please select a branch before proceeding with carhop payment');
                            }
                            
                            // Carhop order with Payme payment
                            await _handlePaymeCarhopPayment(
                              name: firstName,
                              phone: phoneNumber,
                              branchName: selectedBranch,
                              comment: commented,
                              carDetails: carDetails,
                              total: orderPrice,
                              latitude: 41.313798749076454, // default latitude
                              longitude: 69.24407311805851, // default longitude
                              cartProvider: cartProvider,
                              orderType: 'carhop',
                            );
                          } else {
                            // Pickup order with Payme payment
                            // For pickup, we'll use the same flow as delivery but with branch address
                            await _handlePaymePayment(
                              name: firstName,
                              phone: phoneNumber,
                              address: "Branch: $selectedBranch",
                              comment: commented,
                              total: orderPrice,
                              latitude: 41.313798749076454, // default latitude
                              longitude: 69.24407311805851, // default longitude
                              cartProvider: cartProvider,
                              deliveryFee: 0, // No delivery fee for pickup
                              branchName: selectedBranch!,
                            );
                          }
                          
                          // Navigate to home page after launching Payme
                          Navigator.pushNamedAndRemoveUntil(
                            context, 
                            '/homeNew', 
                            (route) => false,
                          );
                          
                          // Reset processing state since we're redirecting to Payme
                          setState(() {
                            _isProcessing = false;
                          });
                          
                          // Return early since we're redirecting to Payme
                          return;
                        } catch (e) {
                          print('Error handling Payme payment: $e');
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Error processing Payme payment: ${e.toString()}'),
                              backgroundColor: Colors.red,
                            ),
                          );
                          setState(() {
                            _isProcessing = false;
                          });
                          return;
                        }
                      }

                      try {
                        // First try to use the new API endpoint
                        bool apiSuccess = false;

                        // Only use carhop flow for _selectedIndex == 2
                        if (_selectedIndex != 2) {
                          // Try the new API endpoint first
                          try {
                            if (_selectedIndex == 0) {
                              // Delivery order
                              apiSuccess = await sendOrderToApi(
                                selectedAddress, // address
                                firstName, // name
                                phoneNumber, // phone
                                selectedOption!, // paymentType
                                commented, // comment
                                orderPrice, // total
                                cartProvider.showLat(), // latitude
                                cartProvider.showLong(), // longitude
                                cartProvider,
                                deliveryFee:
                                    deliveryFee, // Add delivery fee from nearest branch
                              );
                            } else if (_selectedIndex == 1) {
                              // Pickup order
                              apiSuccess = await sendOrderToApi(
                                "Branch: $selectedBranch", // address with branch name
                                firstName, // name
                                phoneNumber, // phone
                                selectedOption!, // paymentType
                                commented, // comment
                                orderPrice, // total
                                41.313798749076454, // default latitude
                                69.24407311805851, // default longitude
                                cartProvider,
                                // No delivery fee for pickup orders
                              );
                            }
                          } catch (e) {
                            print(
                                'Error with new API, falling back to old method: $e');
                            apiSuccess = false;
                          }
                        }

                        // If the new API failed or it's a carhop order, use the old method
                        if (!apiSuccess) {
                          if (_selectedIndex == 0) {
                            // Send order to Telegram
                            await sendOrderToTelegram(
                              selectedAddress, // address
                              "Неизвестно", // branchName
                              firstName, // name
                              phoneNumber, // phone
                              selectedOption!, // paymentType
                              commented,
                              orderItems, // orderItems
                              orderPrice, // total
                              cartProvider.showLat(), // latitude
                              cartProvider.showLong(), // longitude
                              orderType,
                              carDetails,
                              cartProvider,
                            );
                          } else if (_selectedIndex == 1) {
                            await sendOrderToTelegram(
                              "Неизвестно", // address
                              selectedBranch!, // branchName
                              firstName, // name
                              phoneNumber, // phone
                              selectedOption!, // paymentType
                              commented,
                              orderItems, // orderItems
                              orderPrice, // total
                              41.313798749076454, // latitude ,
                              69.24407311805851, // longitude
                              orderType,
                              carDetails,
                              cartProvider,
                            );
                          } else if (_selectedIndex == 2) {
                            await sendOrderToTelegram(
                              "Неизвестно", // address
                              selectedBranch!, // branchName
                              firstName, // name
                              phoneNumber, // phone
                              selectedOption!, // paymentType
                              commented,
                              orderItems, // orderItems
                              orderPrice, // total
                              41.313798749076454, // latitude ,
                              69.24407311805851, // longitude
                              "carhop", // Explicitly set to carhop for this order type
                              carDetails,
                              cartProvider,
                            );
                          }
                        }

                        // Reset processing state
                        setState(() {
                          _isProcessing = false;
                        });

                        // Show success message
                        showDialog(
                          // ignore: use_build_context_synchronously
                          context: context,
                          builder: (context) => AlertDialog(
                            title: Text(
                              AppLocalizations.of(context).orderSuccess,
                              style: const TextStyle(fontSize: 16),
                              textAlign: TextAlign.center,
                            ),
                            content: Text(AppLocalizations.of(context)
                                .orderSuccessSubTitle),
                            contentPadding: const EdgeInsets.only(
                                top: 30, left: 30, right: 30),
                            actions: [
                              const SizedBox(height: 20),
                              Center(
                                child: TextButton(
                                  onPressed: () {
                                    Navigator.pop(context); // Close the dialog
                                    Navigator.pushNamed(context, '/homeNew');
                                  },
                                  style: TextButton.styleFrom(
                                    backgroundColor:
                                        Colors.green, // Green background
                                    shape: RoundedRectangleBorder(
                                      borderRadius: BorderRadius.circular(
                                          25), // Circular border
                                    ),
                                  ),
                                  child: const Text(
                                    'OK',
                                    style: TextStyle(
                                        color:
                                            Colors.white), // White font color
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      } catch (e) {
                        // Reset processing state
                        setState(() {
                          _isProcessing = false;
                        });

                        // Handle error
                        print('Error during order submission: $e');
                        showDialog(
                          context: context,
                          builder: (context) => AlertDialog(
                            title: const Text('Order Error'),
                            content: Text(
                                'Failed to place your order: ${e.toString().length > 100 ? e.toString().substring(0, 100) + '...' : e.toString()}\n\nPlease try again later.'),
                            actions: [
                              TextButton(
                                onPressed: () {
                                  Navigator.pop(context); // Close the dialog
                                },
                                child: const Text('OK'),
                              ),
                            ],
                          ),
                        );
                      } finally {
                        setState(() {
                          _isProcessing = false; // Stop processing
                        });
                      }
                    }
                  : null, // Disable button if address is not selected
              style: ButtonStyle(
                backgroundColor: WidgetStateProperty.all<Color>(
                  (_selectedIndex == 0 &&
                              selectedAddress != null &&
                              selectedOption != null) ||
                          (_selectedIndex == 1 &&
                              selectedBranch != null &&
                              selectedOption != null) ||
                          (_selectedIndex == 2 &&
                              selectedCity !=
                                  null && // Add check for selectedCity
                              selectedBranch != null &&
                              selectedOption != null &&
                              carDetails != null &&
                              carDetails!.trim().isNotEmpty)
                      ? const Color(0xffFEC700) // Enabled state
                      : const Color(0xFFCCCCCC), // Disabled state
                ),
              ),

              child: _isProcessing
                  ? const Padding(
                      padding: EdgeInsets.all(12.0),
                      child: CircularProgressIndicator(
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : Padding(
                      padding: const EdgeInsets.symmetric(
                          vertical: 15.0, horizontal: 125.0),
                      child: Text(
                        AppLocalizations.of(context).order,
                        style: const TextStyle(
                          fontWeight: FontWeight.w600,
                          fontSize: 16,
                          color: Colors.black,
                        ),
                      ),
                    ),
            ),
            const SizedBox(
              height: 50.0,
            )
          ],
        ),
      ),
    );
  }

  AppBar appBar() {
    return AppBar(
      backgroundColor: Colors.white,
      title: Text(
        AppLocalizations.of(context).checkout,
        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
      ),
      centerTitle: true,
      leading: GestureDetector(
        onTap: () {
          Navigator.push(
              context, MaterialPageRoute(builder: (context) => const Cart()));
        },
        child: SizedBox(
          height: 25,
          width: 25,
          child: SvgPicture.asset('images/keyboard_arrow_left.svg'),
        ),
      ),
    );
  }

  Future<String> getChatId() async {
    try {
      if (!_isRemoteConfigInitialized) {
        await _initializeRemoteConfig();
      }

      String chatId = remoteConfig.getString('chat_id');
      if (chatId.isEmpty) {
        print('Using default chat_id as Remote Config value was empty');
        return '-1002074915184';
      }

      print('Retrieved chat_id from Remote Config: $chatId');
      return chatId;
    } catch (e) {
      print('Error getting chat_id: $e');
      return '-1002074915184';
    }
  }

  Future<bool> sendOrderToApi(
      String? address,
      String name,
      String phone,
      String paymentType,
      String comment,
      double total,
      double latitude,
      double longitude,
      CartProvider cartProvider,
      {double deliveryFee = 0}) async {
    try {
      // Get API service with client credentials
      final remoteConfig = FirebaseRemoteConfig.instance;
      final clientId = remoteConfig.getString('api_client_id');
      final clientSecret = remoteConfig.getString('api_client_secret');

      final apiService = ApiService(
        clientId: clientId,
        clientSecret: clientSecret,
      );

      // Format cart items for the API
      List<Map<String, dynamic>> formattedItems =
          cartProvider.cartItems.map((item) {
        return {
          "id": item.product.uuid, // Use the UUID from the product model
          "name": item.product.name,
          "price": item.product.price,
          "quantity": item.quantity,
          "totalPrice": item.product.price * item.quantity,
        };
      }).toList();

      print('Formatted items with UUIDs: ${json.encode(formattedItems)}');

      // Send the order using the API service
      final response = await apiService.createOrder(
        clientName: name,
        phoneNumber: phone,
        latitude: latitude,
        longitude: longitude,
        address: address ?? 'No address provided',
        items: formattedItems,
        totalCost: total,
        paymentType: paymentType.toLowerCase() == 'card' ? 'Payme' : 'cash',
        comment: comment,
        persons: 1,
        deliveryFee: deliveryFee,
      );

      print('Order submitted successfully: ${response.toString()}');

      // Add order notification
      final notificationProvider =
          Provider.of<NotificationProvider>(context, listen: false);
      await notificationProvider.addOrderNotification(
        title: "New Order",
        body: "Your order has been placed successfully!",
        messageId: response['id']?.toString() ??
            DateTime.now().millisecondsSinceEpoch.toString(),
      );

      // Clear the cart
      cartProvider.clearCart();
      return true;
    } catch (e) {
      print('Error submitting order to API: $e');
      return false;
    }
  }

  Future<void> sendOrderToTelegram(
      String? address,
      String branchName,
      String name,
      String phone,
      String paymentType,
      String comment,
      List orderItems,
      double total,
      double latitude,
      double longitude,
      String orderType,
      String carDetails,
      CartProvider cartProvider) async {
    try {
      // Handle carhop orders
      if (orderType.toLowerCase() == 'carhop') {
        if (selectedBranch == null) {
          throw Exception('Please select a branch first');
        }
        final branchConfig = BranchConfigs.getConfig(selectedBranch!);
        // Use the actual cart items from the cart provider
        final List<Map<String, dynamic>> formattedOrderItems =
            cartProvider.cartItems.map((item) {
          return {
            "actual_price": item.product.price,
            "product_id": item.product.id.toString(),
            "quantity": item.quantity,
            "note": null
          };
        }).toList();

        // Prepare the request body for Sieves API
        final Map<String, dynamic> requestBody = {
          "customer_quantity": 1,
          "customer_id": null,
          "is_fast": 0,
          "queue_type": "sync",
          "start_time": "now",
          "isSynchronous": "sync",
          "delivery_employee_id": null,
          "employee_id": branchConfig.employeeId,
          "branch_id": branchConfig.branchId,
          "order_type_id": 8, // for carhop - zakas s parkovki
          "orderItems": formattedOrderItems,
          "transactions": [
            {
              "account_id": 1,
              "amount": total,
              "payment_type_id": paymentType.toLowerCase() == 'card'
                  ? 1
                  : (paymentType.toLowerCase() == 'payme' ? 3 : 2),
              "type": "deposit"
            }
          ],
          "value": total,
          "note": "$comment\nCar Details: $carDetails",
          "day_session_id": null,
          "pager_number": phone,
          "pos_id": null,
          "pos_session_id": null,
          "delivery_amount": null
        };

        // Debug logging
        print('Sending carhop order with payload: ${jsonEncode(requestBody)}');

        final response = await http.post(
          Uri.parse(
              'https://app.sievesapp.com/v1/order?code=${branchConfig.sievesApiCode}'),
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ${branchConfig.sievesApiToken}',
            'Accept': 'application/json',
          },
          body: jsonEncode(requestBody),
        );

        if (response.statusCode != 200) {
          print('Response status code: ${response.statusCode}');
          print('Response body: ${response.body}');
          throw Exception('Failed to send carhop order');
        } else {
          print("Carhop order sent successfully! Response: ${response.body}");

          // Parse the response and save order details
          final responseData = jsonDecode(response.body);
          final prefs = await SharedPreferences.getInstance();

          // Get existing orders or initialize empty list
          List<String> savedOrders = prefs.getStringList('carhop_orders') ?? [];

          // Create new order object
          Map<String, dynamic> orderDetails = {
            'id': responseData['id'],
            'paid': responseData['paid'],
            'timestamp': DateTime.now().toIso8601String(),
            'orderItems': cartProvider.cartItems
                .map((item) => {
                      'name': item.product.name,
                      'quantity': item.quantity,
                      'price': item.product.price,
                      'carDetails': carDetails
                    })
                .toList(),
          };

          // Add new order to the list
          savedOrders.add(jsonEncode(orderDetails));

          // Keep only the last 5 orders to prevent memory issues
          if (savedOrders.length > 5) {
            savedOrders = savedOrders.sublist(savedOrders.length - 5);
          }

          // Save updated list
          await prefs.setStringList('carhop_orders', savedOrders);

          // Add order notification
          final notificationProvider =
              Provider.of<NotificationProvider>(context, listen: false);
          await notificationProvider.addOrderNotification(
            title: "New Car-hop Order",
            body: "Your car-hop order has been placed successfully!",
            messageId: responseData['id'].toString(),
          );

          cartProvider.clearCart();
          return;
        }
      }

      // Original telegram order sending logic for non-carhop orders
      final orderDetails = "Адрес: $address\n" +
          "Филиал: $branchName\n" +
          "Имя: $name\n" +
          "Тел: $phone\n" +
          "Тип платежа: $paymentType\n\n" +
          "Тип zakaza: $orderType\n\n" +
          "Заметка: ${comment.isEmpty ? 'Нет заметки' : comment}\n\n" +
          "🛒 <b>Корзина:</b>\n${orderItems.join("\n")}\n\n" +
          "<b>Итого:</b> ${NumberFormat('#,##0').format(total).toString()} сум\n\n" +
          "-----------------------\n" +
          "Mashina ma'lumotlari:\n ${carDetails.isEmpty ? 'Ma\'lumot yo\'q' : carDetails}\n\n" +
          "-----------------------\n" +
          "Источник: Mobile App\n";

      final encodedOrderDetails = Uri.encodeQueryComponent(orderDetails);

      String chatId = await getChatId();
      print("Using chatId: $chatId");

      final telegramDebUrl =
          "https://api.sievesapp.com/v1/public/make-post?chat_id=$chatId&text=$encodedOrderDetails&latitude=$latitude&longitude=$longitude";

      final response = await http.get(
        Uri.parse(telegramDebUrl),
        headers: {
          "Content-Type": "application/json; charset=UTF-8",
        },
      );

      if (response.statusCode != 200) {
        print('Response status code: ${response.statusCode}');
        print('Response body: ${response.body}');
        throw Exception('Failed to send order');
      } else {
        print("Order sent successfully! Response: ${response.body}");
        cartProvider.clearCart();
      }
    } catch (e) {
      print('Error sending order: $e');
      rethrow;
    }
  }
}
